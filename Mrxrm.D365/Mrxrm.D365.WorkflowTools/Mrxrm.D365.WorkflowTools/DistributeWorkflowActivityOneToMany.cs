
// <copyright file="DistributeWorkflowActivityOneToMany.cs" company="">
// Copyright (c) 2017 All Rights Reserved
// </copyright>
// <author></author>
// <date>5/20/2017 4:47:14 PM</date>
// <summary>Implements the DistributeWorkflowActivityOneToMany Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.Threading.Tasks;
using System.Activities;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Workflow;
using System.Runtime.Serialization;
using Microsoft.Xrm.Sdk.Client;

namespace Mrxrm.D365.WorkflowTools.Mrxrm.D365.WorkflowTools
{
    /// </summary>    
    public class DistributeWorkflowActivityOneToMany: WorkFlowActivityBase, IDistributeWorkflowActivity
    {

        #region Properties 
        //Property for Entity site
        [RequiredArgument]
        [Input("Distributed Workflow")]
        [ReferenceTarget("workflow")]
        public InArgument<EntityReference> DistributedWorkflow { get; set; }
        #endregion


        /// <summary>
        /// Executes the WorkFlow.
        /// </summary>
        /// <param name="crmWorkflowContext">The <see cref="WorkFlowActivityBase.LocalWorkflowContext"/> </param> which contains the
        /// <param name="executionContext" > <see cref="CodeActivityContext"/>
        /// </param>       
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches WorkFlow instances.
        /// The WorkFlow's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the WorkFlow. Also, multiple system threads
        /// could execute the WorkFlow at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in WorkFlows.
        /// </remarks>
        public override void ExecuteCRMWorkFlowActivity(CodeActivityContext executionContext, LocalWorkflowContext crmWorkflowContext)
        {                 
            crmWorkflowContext.TracingService.Trace("Workflow started");
            
            if (crmWorkflowContext == null)
            {
                throw new ArgumentNullException("crmWorkflowContext");
            }

            try
            {
                // TODO: Implement your custom activity handling.
                var wfRef = DistributedWorkflow.Get<EntityReference>(executionContext);

                if (wfRef == null)
                {
                    crmWorkflowContext.TracingService.Trace("Distributed Workflow Input is null.");
                    throw new NullReferenceException("Distributed Workflow");
                }

                this.Distribute(wfRef.Id, crmWorkflowContext.OrganizationService, crmWorkflowContext.TracingService);
            }
            catch (FaultException<OrganizationServiceFault> e)
            {
                // Handle the exception.
                crmWorkflowContext.TracingService.Trace("Exception: {0}\r\nInner Exception {1}", e.Message,
                    e.InnerException);
                throw e;
            }

            crmWorkflowContext.TracingService.Trace("Workflow ended");
        }

        public IEnumerable<Guid> GetKeys(IOrganizationService orgService)
        {
            // Get parent record ID

            // Get children records
            using (var ctx = new OrganizationServiceContext(orgService))
            {
                var childrenRecords = from r in ctx.CreateQuery("childentityname")
                    where r["foreignKeyName"] == "parent ID"
                    select Id;
            }
        }
    }

}
